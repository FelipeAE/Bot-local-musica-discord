const { Client, GatewayIntentBits, PermissionsBitField, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder } = require('discord.js');
const { joinVoiceChannel, createAudioPlayer, createAudioResource, AudioPlayerStatus, StreamType } = require('@discordjs/voice');
const { exec } = require('child_process');
const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');
const { v4: uuidv4 } = require('uuid'); // NEW: Para nombres de archivo √∫nicos
const { createLogger, format, transports } = require('winston');
const moment = require('moment-timezone');
const { title } = require('process');
const { url } = require('inspector');
const { get } = require('http');
const config = require('./config.json');

// Configura tu zona horaria desde el archivo de configuraci√≥n
const TIMEZONE = config.timezone || 'America/Santiago';

const logger = createLogger({
    level: 'info',
    format: format.combine(
        format.timestamp(),
        format.printf(({ timestamp, level, message }) => {
            // Formatea la fecha con tu zona horaria
            const localTime = moment(timestamp).tz(TIMEZONE).format('DD-MM-YY HH:mm');
            return `${localTime} [${level.toUpperCase()}]: ${message}`;
        })
    ),
    transports: [
        new transports.File({ filename: 'music-bot.log' }),
        new transports.Console()
    ]
});

// Guardar el PID del proceso actual en un archivo
const pidFile = path.join(__dirname, 'bot.pid');
fs.writeFileSync(pidFile, process.pid.toString(), 'utf8');

// Al iniciar, matar procesos hu√©rfanos y limpiar archivos temporales
async function cleanupOnStart() {
    try {
        // Limpiar archivos temporales antiguos
        const files = fs.readdirSync(__dirname);
        const tempFiles = files.filter(file => file.startsWith('temp_audio_'));
        
        for (const file of tempFiles) {
            try {
                fs.unlinkSync(path.join(__dirname, file));
                logger.info(`Archivo temporal limpiado al inicio: ${file}`);
            } catch (error) {
                logger.warn(`No se pudo limpiar archivo temporal: ${file}`);
            }
        }
        
        logger.info('Limpieza inicial completada');
    } catch (error) {
        logger.error(`Error en limpieza inicial: ${error.message}`);
    }
}

// Ejecutar limpieza al inicio
cleanupOnStart();

let queue = [];
let player;
let currentVolume = 1;
let connection;
let isProcessing = false;
let currentSong = null;
let buttonsSent = false;
let controlMessage = null;  // Almacena el mensaje de controles
let lastChannelId = null;   // Guarda el ID del √∫ltimo canal donde se enviaron controles 
const processes = new Set(); // NEW: Trackear procesos hijos
// let repeatMode = 'none'; // 'none' | 'song' | 'playlist'
let originalPlaylist = []; // Para guardar la playlist original
const queueButton = new ButtonBuilder()
    .setCustomId('show_queue')
    .setLabel('üéµ Mostrar Cola')
    .setStyle(ButtonStyle.Primary);



const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildVoiceStates,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ]
});

// Cache para evitar llamadas duplicadas a getVideoInfo
const videoInfoCache = new Map();

async function getVideoInfo(url) {
    return new Promise((resolve, reject) => {
        // Verificar cache para evitar llamadas duplicadas
        if (videoInfoCache.has(url)) {
            logger.info(`Usando informaci√≥n cacheada para: ${url}`);
            resolve(videoInfoCache.get(url));
            return;
        }
        
        // Limpiar la URL antes de obtener el t√≠tulo
        const cleanedUrl = cleanYouTubeUrl(url);
        
        logger.info(`üéØ Obteniendo informaci√≥n del video (timeout 3s)...`);
        
        // Timeout manual muy agresivo para respuesta r√°pida
        const timeoutId = setTimeout(() => {
            logger.warn(`‚è∞ Timeout r√°pido - usando fallback`);
            const fallbackInfo = { 
                title: 'Video de YouTube', 
                duration: 0, 
                isLong: false,
                originalTitle: 'Video de YouTube',
                durationFormatted: ''
            };
            videoInfoCache.set(url, fallbackInfo);
            resolve(fallbackInfo);
        }, 3000); // Solo 3 segundos
        
        exec(`yt-dlp --get-title --get-duration --no-warnings "${cleanedUrl}"`, { 
            timeout: 2000, 
            encoding: 'utf8',
            env: { ...process.env, PYTHONIOENCODING: 'utf-8' }
        }, (error, stdout, stderr) => {
            clearTimeout(timeoutId);
            
            if (error) {
                logger.warn(`‚ö†Ô∏è Error obteniendo informaci√≥n (usando fallback): ${error.message}`);
                const fallbackInfo = { 
                    title: 'Video de YouTube', 
                    duration: 0, 
                    isLong: false,
                    originalTitle: 'Video de YouTube',
                    durationFormatted: ''
                };
                videoInfoCache.set(url, fallbackInfo);
                resolve(fallbackInfo);
            } else {
                // Asegurar que el stdout est√© en UTF-8
                const lines = stdout.trim().split('\n');
                let title = lines[0] || 'Video de YouTube';
                const durationFormatted = lines[1] || '';
                
                // Normalizar el t√≠tulo para caracteres especiales
                title = normalizeUTF8(title);
                
                // Convertir duraci√≥n a segundos
                let durationSeconds = 0;
                if (durationFormatted.includes(':')) {
                    const parts = durationFormatted.split(':').map(p => parseInt(p) || 0);
                    if (parts.length === 3) { // HH:MM:SS
                        durationSeconds = parts[0] * 3600 + parts[1] * 60 + parts[2];
                    } else if (parts.length === 2) { // MM:SS
                        durationSeconds = parts[0] * 60 + parts[1];
                    }
                }
                
                const longThreshold = config.longVideoDurationThreshold || 3600;
                const isLong = durationSeconds > longThreshold;
                
                let finalTitle = title;
                if (durationFormatted) {
                    finalTitle = isLong ? `${title} ‚ö†Ô∏è (${durationFormatted})` : `${title} (${durationFormatted})`;
                }
                
                const videoInfo = { 
                    title: finalTitle, 
                    duration: durationSeconds, 
                    isLong: isLong,
                    originalTitle: title,
                    durationFormatted: durationFormatted
                };
                
                logger.info(`‚úÖ Info obtenida: ${title} (${durationFormatted})`);
                
                // Cache por 5 minutos
                videoInfoCache.set(url, videoInfo);
                setTimeout(() => videoInfoCache.delete(url), 300000);
                
                resolve(videoInfo);
            }
        });
    });
}

// Mantener funci√≥n anterior para compatibilidad
async function getVideoTitle(url) {
    const info = await getVideoInfo(url);
    return info.title;
}

async function addSongToQueue(url, member, channel, voiceChannel, skipConfirmation = false) {
    try {
        // Verificar si ya se est√° procesando esta URL para evitar duplicados
        const isDuplicate = queue.some(song => song.url === url) || (currentSong && currentSong.url === url);
        if (isDuplicate) {
            logger.warn(`URL duplicada detectada, ignorando: ${url}`);
            return;
        }
        
        logger.info(`üîç Iniciando addSongToQueue para: ${url}`);
        const videoInfo = await getVideoInfo(url);  // Obtener informaci√≥n completa
        logger.info(`üìä Informaci√≥n del video obtenida: ${JSON.stringify(videoInfo)}`);
        
        // Verificar si es un video muy largo y no se salt√≥ la confirmaci√≥n
        if (videoInfo.isLong && !skipConfirmation) {
            logger.info(`‚ö†Ô∏è Video largo detectado, solicitando confirmaci√≥n...`);
            let warningText = `**${videoInfo.originalTitle}**\n\nDuraci√≥n: ${videoInfo.durationFormatted}\n\nEste video puede tardar mucho en descargar y consumir mucho espacio.`;
            
            // Advertencia adicional para videos HLS
            if (videoInfo.usesHLS) {
                warningText += `\n\n‚ö†Ô∏è **ADVERTENCIA**: Este video usa formato HLS (streaming) que puede ser inestable para descargas largas. Puede fallar o colgarse.`;
            }
            
            warningText += `\n¬øDeseas continuar?`;
            
            const confirmEmbed = {
                color: videoInfo.usesHLS ? 0xFF6600 : 0xFFAA00, // Naranja m√°s intenso para HLS
                title: videoInfo.usesHLS ? '‚ö†Ô∏è Video Largo HLS Detectado' : '‚ö†Ô∏è Video Largo Detectado',
                description: warningText,
                footer: { text: 'Reacciona con ‚úÖ para confirmar o ‚ùå para cancelar (30 segundos)' }
            };
            
            const confirmMessage = await channel.send({ embeds: [confirmEmbed] });
            
            try {
                await confirmMessage.react('‚úÖ');
                await confirmMessage.react('‚ùå');
            } catch (reactionError) {
                logger.error(`Error a√±adiendo reacciones: ${reactionError.message}`);
                // Continuar sin confirmaci√≥n si hay error con reacciones
                confirmMessage.edit({ 
                    embeds: [{ 
                        color: 0xFFA500, 
                        title: '‚ö†Ô∏è Sistema de confirmaci√≥n no disponible', 
                        description: 'A√±adiendo video largo sin confirmaci√≥n...' 
                    }] 
                });
            }
            
            // Esperar reacci√≥n del usuario
            const filter = (reaction, user) => {
                return ['‚úÖ', '‚ùå'].includes(reaction.emoji.name) && user.id === member.user.id;
            };
            
            try {
                const collected = await confirmMessage.awaitReactions({ 
                    filter, 
                    max: 1, 
                    time: 30000, 
                    errors: ['time'] 
                });
                
                const reaction = collected.first();
                
                if (reaction.emoji.name === '‚ùå') {
                    const cancelEmbed = {
                        color: 0xFF0000,
                        title: '‚ùå Video Cancelado',
                        description: 'El video no se a√±adi√≥ a la cola.'
                    };
                    confirmMessage.edit({ embeds: [cancelEmbed], components: [] });
                    return;
                }
                
                if (reaction.emoji.name === '‚úÖ') {
                    const acceptEmbed = {
                        color: 0x00FF00,
                        title: '‚úÖ Video Confirmado',
                        description: `A√±adiendo **${videoInfo.originalTitle}** a la cola...`
                    };
                    confirmMessage.edit({ embeds: [acceptEmbed], components: [] });
                }
            } catch (error) {
                const timeoutEmbed = {
                    color: 0x888888,
                    title: '‚è±Ô∏è Tiempo Agotado',
                    description: 'No se recibi√≥ confirmaci√≥n. El video no se a√±adi√≥ a la cola.'
                };
                confirmMessage.edit({ embeds: [timeoutEmbed], components: [] });
                return;
            }
        }
        
        // A√±adir informaci√≥n completa a la cola
        queue.push({ 
            url, 
            title: videoInfo.title, 
            originalTitle: videoInfo.originalTitle,
            duration: videoInfo.duration,
            isLong: videoInfo.isLong,
            member, 
            channel 
        });
        
        logger.info(`‚úÖ Canci√≥n a√±adida a la cola: ${videoInfo.title}`);
        logger.info(`üìã Cola actual tiene ${queue.length} elementos`);
        
        // Mensaje de confirmaci√≥n
        const addedEmbed = {
            color: 0x00AA00,
            title: 'üéµ Canci√≥n A√±adida',
            description: `**${videoInfo.originalTitle}**${videoInfo.durationFormatted ? `\nDuraci√≥n: ${videoInfo.durationFormatted}` : ''}`,
            footer: { text: `Posici√≥n en cola: ${queue.length}` }
        };
        
        channel.send({ embeds: [addedEmbed] });

        // Si no hay ninguna canci√≥n en reproducci√≥n, iniciar la reproducci√≥n
        if (!isProcessing) {
            logger.info(`üéÆ Iniciando reproducci√≥n inmediata (no hay procesamiento activo)`);
            playNextInQueue(voiceChannel);
        } else {
            logger.info(`‚è≥ Video a√±adido a la cola, hay reproducci√≥n en progreso`);
        }
    } catch (error) {
        logger.error('‚ùå Error al obtener informaci√≥n del video:', error);
        // Agregar sin informaci√≥n como fallback
        queue.push({ url, title: 'T√≠tulo no disponible', member, channel, isLong: false });
        if (!isProcessing) {
            playNextInQueue(voiceChannel);
        }
    }
}

async function playNextInQueue(voiceChannel) {
    // Resetear controles al iniciar una nueva canci√≥n
    buttonsSent = false;

    // Verificaci√≥n adicional para evitar procesamiento m√∫ltiple
    if (isProcessing) {
        logger.warn('playNextInQueue llamado mientras ya se est√° procesando, ignorando');
        return;
    }

    // Establecer o reestablecer conexi√≥n si es necesario
    if (!connection || connection.state.status === 'disconnected') {
        try {
            connection = joinVoiceChannel({
                channelId: voiceChannel.id,
                guildId: voiceChannel.guild.id,
                adapterCreator: voiceChannel.guild.voiceAdapterCreator,
            });
            connection.on('stateChange', (oldState, newState) => {
                if (newState.status === 'disconnected') {
                    logger.warn('Conexi√≥n perdida. Intentando reconectar...');
                    setTimeout(() => playNextInQueue(voiceChannel), 5000);
                }
            });
        } catch (error) {
            logger.error(`Error de conexi√≥n: ${error.message}`);
            voiceChannel.send('Error al conectar al canal de voz.');
            isProcessing = false;
            return;
        }
    }

    if (queue.length === 0) {
        // Reproducir mensaje de despedida antes de desconectar
        if (connection && voiceChannel) {
            logger.info('üéµ Cola vac√≠a, reproduciendo mensaje de despedida...');
            
            // Buscar el √∫ltimo canal de texto usado
            let lastTextChannel = null;
            if (currentSong && currentSong.channel) {
                lastTextChannel = currentSong.channel;
            }
            
            // Reproducir despedida
            await playGoodbyeMessage(voiceChannel, lastTextChannel);
        }
        
        if (connection) {
            connection.destroy();
            connection = null;
        }
        currentSong = null;
        isProcessing = false;
        buttonsSent = false;
        if (controlMessage) {
            await controlMessage.edit({ components: [] });
            controlMessage = null;
        }
        return;
    }

    // Verificaci√≥n robusta para evitar procesamiento doble
    if (isProcessing) {
        logger.warn('Ya hay una descarga en proceso, evitando duplicado');
        return;
    }
    
    isProcessing = true;

    const song = queue[0];
    currentSong = song;

    // Generamos un nombre de archivo √∫nico para el audio descargado
    const tempPath = path.join(__dirname, `temp_audio_${uuidv4()}.mp3`);
    
    // Timeout unificado de 5 minutos para todos los videos
    const timeout = 300000; // 5 minutos para todos los videos
    
    let downloadMessage = `üì• **Descargando**: ${song.originalTitle || song.title}\n‚è∞ Tiempo l√≠mite: ${Math.round(timeout/60000)} minutos`;
    
    if (song.isLong) {
        downloadMessage = `üïê **Descargando video largo**: ${song.originalTitle || song.title}\n‚è∞ Tiempo l√≠mite: ${Math.round(timeout/60000)} minutos`;
    }
    
    if (song.usesHLS) {
        downloadMessage += `\n‚ö†Ô∏è **Formato HLS detectado** - La descarga puede ser m√°s lenta o inestable`;
    }
    
    song.channel.send(downloadMessage);

    // Ejecutar yt-dlp con spawn - comando compatible y optimizado
    let ytdlpArgs = [];
    
    // Configurar formato seg√∫n el tipo de video y si es un reintento
    if (song.customFormat) {
        // Usar formato espec√≠fico proporcionado por el usuario
        ytdlpArgs.push('-f', song.customFormat);
        logger.info(`üéØ Usando formato espec√≠fico ${song.customFormat}: ${song.originalTitle}`);
    } else if (song.forceAlternativeFormat) {
        // M√∫ltiples formatos alternativos para videos problem√°ticos
        if (song.retryAttempt === 1) {
            ytdlpArgs.push('-f', 'worst[ext=mp4]/worst[ext=webm]/worst');
            logger.info(`üîÑ Reintento 1 - Usando formato worst: ${song.originalTitle}`);
        } else if (song.retryAttempt === 2) {
            ytdlpArgs.push('-f', 'bestaudio[ext=m4a]/bestaudio[ext=webm]/bestaudio');
            logger.info(`üîÑ Reintento 2 - Usando bestaudio espec√≠fico: ${song.originalTitle}`);
        } else {
            ytdlpArgs.push('-f', 'best[height<=360]/worst');
            logger.info(`üîÑ Reintento 3 - Usando calidad baja: ${song.originalTitle}`);
        }
    } else {
        ytdlpArgs.push('-f', 'bestaudio/best');
    }
    
    ytdlpArgs.push(
        '--no-warnings',
        '--no-playlist',
        '-o', tempPath
    );

    // A√±adir opciones espec√≠ficas para videos largos (opciones probadas y compatibles)
    if (song.isLong || song.forceHLS || song.forceAlternativeFormat) {
        ytdlpArgs.push(
            '--retries', '5',
            '--fragment-retries', '5',
            '--socket-timeout', '60',
            '--no-continue',  // Evitar archivos .part problem√°ticos
            '--concurrent-fragments', '1',  // Un fragmento a la vez para estabilidad
            '--no-part'  // Evitar archivos .part completamente
        );
        
        // Opciones adicionales para HLS forzado
        if (song.forceHLS) {
            ytdlpArgs.push(
                '--hls-use-mpegts',  // Mejor manejo de HLS
                '--hls-prefer-native',  // Usar extractor nativo de HLS
                '--extractor-args', 'youtube:player_client=android'  // Usar cliente Android que a veces evita HLS
            );
            logger.info(`Descargando con configuraci√≥n experimental HLS: ${song.originalTitle}`);
        } else if (song.forceAlternativeFormat) {
            // Configuraci√≥n diferente seg√∫n el intento
            if (song.retryAttempt === 1) {
                ytdlpArgs.push(
                    '--extractor-args', 'youtube:player_client=web',
                    '--prefer-free-formats'
                );
                logger.info(`Reintento 1 con cliente web: ${song.originalTitle}`);
            } else if (song.retryAttempt === 2) {
                ytdlpArgs.push(
                    '--extractor-args', 'youtube:player_client=ios',
                    '--no-check-certificate'
                );
                logger.info(`Reintento 2 con cliente iOS: ${song.originalTitle}`);
            } else {
                ytdlpArgs.push(
                    '--extractor-args', 'youtube:player_client=android',
                    '--format-sort', '+size,+br'
                );
                logger.info(`Reintento 3 con cliente Android: ${song.originalTitle}`);
            }
        } else {
            ytdlpArgs.push('--hls-use-mpegts');
            logger.info(`Descargando video largo con opciones robustas para HLS: ${song.originalTitle}`);
        }
    } else {
        ytdlpArgs.push(
            '--retries', '3',
            '--fragment-retries', '3',
            '--socket-timeout', '30'
        );
    }

    ytdlpArgs.push(song.url);

    logger.info(`Ejecutando: yt-dlp ${ytdlpArgs.join(' ')}`);
    const child = spawn('yt-dlp', ytdlpArgs, {
        env: { ...process.env, PYTHONIOENCODING: 'utf-8' },
        stdio: ['pipe', 'pipe', 'pipe']
    });

    // Configurar timeout manualmente con mensaje espec√≠fico
    let lastProgressTime = Date.now();
    let progressCheckInterval;
    
    const timeoutId = setTimeout(() => {
        const timeoutMinutes = Math.round(timeout/60000);
        logger.error(`Timeout en descarga despu√©s de ${timeout}ms (${timeoutMinutes} min) - proceso terminado`);
        child.kill('SIGKILL');
        cleanupTempFile(tempPath);
        cleanupPartFiles(tempPath);
        
        if (progressCheckInterval) clearInterval(progressCheckInterval);
        
        let timeoutMessage;
        if (song.isLong) {
            timeoutMessage = `‚è∞ **Timeout en video largo** (${timeoutMinutes} min)\n` +
                           `El video era demasiado grande para descargar. Intenta con un video m√°s corto o verifica tu conexi√≥n.`;
        } else {
            timeoutMessage = `‚è∞ **Timeout en descarga** (${timeoutMinutes} min)\n` +
                           `La descarga tard√≥ demasiado. Intenta con una canci√≥n m√°s corta.`;
        }
        
        song.channel.send(timeoutMessage);
        queue.shift();
        isProcessing = false;
        playNextInQueue(voiceChannel);
    }, timeout);

    // Heartbeat para detectar procesos colgados (solo para videos largos)
    if (song.isLong) {
        progressCheckInterval = setInterval(() => {
            const now = Date.now();
            const timeSinceLastProgress = now - lastProgressTime;
            
            // Si no hay progreso por 5 minutos, matar el proceso
            if (timeSinceLastProgress > 300000) { // 5 minutos sin progreso
                logger.warn(`Proceso sin progreso por ${Math.round(timeSinceLastProgress/60000)} minutos. Terminando...`);
                clearTimeout(timeoutId);
                clearInterval(progressCheckInterval);
                child.kill('SIGKILL');
                cleanupTempFile(tempPath);
                cleanupPartFiles(tempPath);
                
                song.channel.send(`‚ö†Ô∏è **Descarga estancada**: El video se qued√≥ sin progreso por m√°s de 5 minutos. Cancelando descarga.`);
                queue.shift();
                isProcessing = false;
                playNextInQueue(voiceChannel);
            }
        }, 30000); // Verificar cada 30 segundos
    }

    // Manejo de error al iniciar el proceso
    child.on('error', error => {
        clearTimeout(timeoutId);
        if (progressCheckInterval) clearInterval(progressCheckInterval);
        logger.error(`Error en spawn de yt-dlp: ${error.message}`);
        song.channel.send('‚ùå Error al iniciar la descarga.');
        cleanupTempFile(tempPath);
        cleanupPartFiles(tempPath);
        queue.shift();
        isProcessing = false; // Asegurar reset del estado
        playNextInQueue(voiceChannel);
    });

    // Recopilar datos de stderr y mostrar progreso
    let stderrData = '';
    let progressMessage = null;
    let lastProgressText = '';
    let progressUpdateTimeout;
    
    child.stderr.on('data', data => {
        stderrData += data;
        const output = data.toString();
        
        // Actualizar tiempo de √∫ltimo progreso
        lastProgressTime = Date.now();
        
        // Mostrar progreso de descarga
        if (output.includes('[download]')) {
            const progressMatch = output.match(/(\d+\.\d+)%/);
            const speedMatch = output.match(/(\d+\.\d+\w+\/s)/);
            const etaMatch = output.match(/ETA (\d+:\d+)/);
            
            if (progressMatch) {
                const progress = progressMatch[1];
                const speed = speedMatch ? speedMatch[1] : '';
                const eta = etaMatch ? etaMatch[1] : '';
                
                const newProgressText = `‚¨¨ **Descargando**: ${song.originalTitle || song.title}\n` +
                                       `üìä Progreso: ${progress}%${speed ? ` | üöÄ ${speed}` : ''}${eta ? ` | ‚è±Ô∏è ETA: ${eta}` : ''}`;
                
                if (newProgressText !== lastProgressText) {
                    lastProgressText = newProgressText;
                    
                    // Evitar spam de mensajes, actualizar cada 10 segundos m√°ximo
                    if (progressUpdateTimeout) clearTimeout(progressUpdateTimeout);
                    progressUpdateTimeout = setTimeout(async () => {
                        try {
                            if (!progressMessage) {
                                progressMessage = await song.channel.send(newProgressText);
                            } else {
                                await progressMessage.edit(newProgressText);
                            }
                        } catch (editError) {
                            // Si falla editar, crear nuevo mensaje
                            try {
                                progressMessage = await song.channel.send(newProgressText);
                            } catch (sendError) {
                                logger.warn(`Error enviando progreso: ${sendError.message}`);
                            }
                        }
                    }, 10000);
                }
            }
        }
    });

    child.on('close', (code, signal) => {
        // Limpiar timeouts y intervalos
        clearTimeout(timeoutId);
        if (progressCheckInterval) clearInterval(progressCheckInterval);
        if (progressUpdateTimeout) clearTimeout(progressUpdateTimeout);
        
        // Remover el proceso del conjunto de procesos activos
        processes.delete(child);
        
        if (signal === 'SIGKILL') {
            logger.warn('Proceso terminado por timeout o heartbeat (SIGKILL)');
            // Ya se manej√≥ en el timeout/heartbeat, no hacer nada m√°s
            return;
        }
        
        if (code === null && signal) {
            logger.error(`yt-dlp terminado por se√±al: ${signal}`);
            song.channel.send('‚ùå Descarga interrumpida.');
            cleanupTempFile(tempPath);
            cleanupPartFiles(tempPath);
            queue.shift();
            isProcessing = false;
            playNextInQueue(voiceChannel);
            return;
        }
        
        if (code !== 0) {
            logger.error(`yt-dlp termin√≥ con c√≥digo ${code}. Mensaje de error: ${stderrData}`);
            
            // Usar la nueva funci√≥n para manejar videos problem√°ticos
            const { errorMessage, shouldRetry } = handleProblematicVideo(song, stderrData, tempPath);
            
            // Si deber√≠a reintentar y no es un reintento ya, intentar con formato alternativo
            if (shouldRetry && (!song.isRetry || (song.retryAttempt && song.retryAttempt < 3))) {
                const attemptNumber = (song.retryAttempt || 0) + 1;
                logger.info(`üîÑ Reintentando (intento ${attemptNumber}/3) con formato alternativo...`);
                
                song.isRetry = true;
                song.retryAttempt = attemptNumber;
                song.forceAlternativeFormat = true;
                
                // Limpiar archivos temporales antes del reintento
                cleanupTempFile(tempPath);
                cleanupPartFiles(tempPath);
                
                // Mostrar mensaje de reintento espec√≠fico
                const retryMessages = [
                    'üîÑ **Reintento 1/3**: Probando con formato worst...',
                    'üîÑ **Reintento 2/3**: Probando con bestaudio espec√≠fico...',
                    'üîÑ **Reintento 3/3**: Probando con calidad baja...'
                ];
                song.channel.send(retryMessages[attemptNumber - 1]);
                
                // Delay progresivo antes del reintento
                const delaySeconds = (attemptNumber - 1) * 5; // 0s, 5s, 10s
                if (delaySeconds > 0) {
                    song.channel.send(`‚è±Ô∏è Esperando ${delaySeconds} segundos antes del reintento...`);
                }
                
                // Reintentar con delay progresivo
                setTimeout(() => {
                    isProcessing = false;
                    playNextInQueue(voiceChannel);
                }, delaySeconds * 1000);
                return;
            }
            
            // Si no se puede reintentar o ya es un reintento, saltar la canci√≥n
            let finalErrorMessage = errorMessage;
            if (song.retryAttempt >= 3) {
                finalErrorMessage = `‚ùå **Video no compatible despu√©s de 3 intentos**\n` +
                                  `üö´ Este video (${song.originalTitle || 'Video'}) no se puede descargar con ning√∫n formato.\n` +
                                  `üí° **Sugerencia**: Usa \`!formats ${song.url}\` para ver formatos disponibles\n` +
                                  `‚è≠Ô∏è Saltando a la siguiente canci√≥n...`;
            }
            
            song.channel.send(finalErrorMessage);
            cleanupTempFile(tempPath);
            cleanupPartFiles(tempPath);
            queue.shift();
            isProcessing = false;
            playNextInQueue(voiceChannel);
            return;
        }

        // Descarga exitosa - actualizar mensaje de progreso
        if (progressMessage) {
            try {
                progressMessage.edit(`‚úÖ **Descarga completada**: ${song.originalTitle || song.title}`);
            } catch (error) {
                logger.warn(`Error actualizando mensaje de progreso: ${error.message}`);
            }
        }

        try {
            if (!fs.existsSync(tempPath)) {
                logger.error('Archivo temporal no existe despu√©s de la descarga');
                song.channel.send('Error: archivo de audio no encontrado.');
                queue.shift();
                isProcessing = false;
                playNextInQueue(voiceChannel);
                return;
            }

            const stats = fs.statSync(tempPath);
            if (stats.size < 10000) {
                logger.warn('Archivo de audio muy peque√±o');
                song.channel.send('Audio incompleto, saltando...');
                cleanupTempFile(tempPath);
                queue.shift();
                isProcessing = false;
                playNextInQueue(voiceChannel);
                return;
            }

            const resource = createAudioResource(fs.createReadStream(tempPath), {
                inputType: StreamType.Arbitrary,
                inlineVolume: true
            });
            resource.volume.setVolume(currentVolume);
            player = createAudioPlayer();

            if (connection && connection.state.status === 'ready') {
                connection.subscribe(player);
            } else {
                throw new Error('Conexi√≥n no establecida');
            }

            player.play(resource);

            player.on(AudioPlayerStatus.Playing, () => {
                logger.info(`Reproduciendo: ${song.url}`);
                currentSong = queue[0]; // Actualiza la canci√≥n actual
                showMusicControls(song.channel);
            });

            player.on(AudioPlayerStatus.Idle, () => {
                logger.info(`Canci√≥n finalizada: ${song.url}`);
                cleanupTempFile(tempPath);
                queue.shift();
                isProcessing = false;
                playNextInQueue(voiceChannel);
            });

            player.on('error', error => {
                logger.error(`Error de reproducci√≥n: ${error.message}`);
                cleanupTempFile(tempPath);
                queue.shift();
                isProcessing = false;
                playNextInQueue(voiceChannel);
            });
        } catch (error) {
            logger.error(`Error de reproducci√≥n: ${error.message}`);
            cleanupTempFile(tempPath);
            queue.shift();
            isProcessing = false;
            playNextInQueue(voiceChannel);
        }
    });

    processes.add(child);
}

// NEW: Funci√≥n actualizada para manejar un √∫nico mensaje de controles
async function showMusicControls(channel) {
    const row = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
            .setCustomId('skip')
            .setLabel('‚è≠ Saltar')
            .setStyle(ButtonStyle.Primary),
        new ButtonBuilder()
            .setCustomId('pause_resume')
            .setLabel('‚è∏ Pausar/‚ñ∂Ô∏è Reanudar')
            .setStyle(ButtonStyle.Secondary),
        new ButtonBuilder()
            .setCustomId('shuffle')
            .setLabel('üîÄ Mezclar')
            .setStyle(ButtonStyle.Success),
        new ButtonBuilder()
            .setCustomId('stop')
            .setLabel('‚èπ Detener')
            .setStyle(ButtonStyle.Danger),
        new ButtonBuilder()
            .setCustomId('nowplaying')
            .setLabel('üé∂ Now Playing')
            .setStyle(ButtonStyle.Secondary),   
    );

    const row2 = new ActionRowBuilder().addComponents(
        queueButton,
        // new ButtonBuilder()
        //     .setCustomId('repeat_song')
        //     .setLabel('üîÇ Repetir Canci√≥n')
        //     .setStyle(ButtonStyle.Secondary),
        // new ButtonBuilder()
        //     .setCustomId('repeat_playlist')
        //     .setLabel('üîÅ Repetir Playlist')
        //     .setStyle(ButtonStyle.Secondary)
    );

    try {
 
        // Si hay un mensaje anterior, lo eliminamos
 
        if (controlMessage) {
 
            await controlMessage.delete().catch(() => {});  // Ignorar errores si el mensaje ya no existe
 
        }
 

 
        // Enviamos un nuevo mensaje con botones
 
        controlMessage = await channel.send({
 
            content: 'Controla la reproducci√≥n de m√∫sica:',
 
            components: [row, row2],
 
        });
 
    } catch (error) {
 
        console.error('Error enviando controles:', error);
 
    }
}


client.on('interactionCreate', async interaction => {
    if (!interaction.isButton()){
        if (interaction.replied || interaction.deferred) {
            return; // Evitar responder dos veces
        }
    }

    const voiceChannel = interaction.member.voice.channel;
    if (!voiceChannel) return interaction.reply({ content: 'Entra a un canal de voz primero.', ephemeral: true });
    if (!player) return interaction.reply({ content: 'No hay m√∫sica en reproducci√≥n.', ephemeral: true });

    try {
        switch (interaction.customId) {
            case 'skip':
                if (queue.length > 1) {
                    player.stop();
                    await interaction.reply('‚è≠ Saltando a la siguiente canci√≥n.');
                    await showMusicControls(interaction.channel);  // Actualiza el mensaje existente
                } else {
                    await interaction.reply('No hay m√°s canciones.');
                }
                break;

            case 'pause_resume':
                if (player.state.status === AudioPlayerStatus.Playing) {
                    player.pause();
                    await interaction.reply('‚è∏ Pausada');
                } else if (player.state.status === AudioPlayerStatus.Paused) {
                    player.unpause();
                    await interaction.reply('‚ñ∂Ô∏è Reanudada');
                }
                break;

            case 'shuffle':
                shuffleQueue(queue);
                await interaction.reply('üîÄ Cola mezclada');
                break;

            case 'stop':
                // Reproducir despedida antes de detener
                const voiceChannel = interaction.member.voice.channel;
                if (voiceChannel && connection) {
                    await playGoodbyeMessage(voiceChannel, interaction.channel);
                }
                
                player.stop();
                queue = [];
                currentSong = null;
                processes.forEach(child => child.kill()); // NEW: Limpiar procesos
                processes.clear();
                await interaction.reply('‚èπ Detenido');
                break;

            case 'nowplaying':
                if (currentSong) {
                    const title = normalizeUTF8(currentSong.title || currentSong.url);
                    await interaction.reply(`üé∂ Reproduciendo ahora: **${title}**`);
                } else {
                    await interaction.reply('No hay m√∫sica en reproducci√≥n.');
                }
                break;
            
            // case 'repeat_song':
            //     // Alternar el modo de repetici√≥n
            //     repeatMode = repeatMode === 'song' ? 'none' : 'song';
                    
            //     // Si se desactiva la repetici√≥n, eliminar la copia de la canci√≥n actual
            //     if (repeatMode === 'none' && currentSong) {
            //         const index = queue.findIndex(song => song.url === currentSong.url);
            //         if (index !== -1) queue.splice(index, 1); // Eliminar duplicado
            //     }
                
            //     await interaction.reply({
            //         content: `üîÇ Modo repetici√≥n: ${repeatMode === 'song' ? 'Activado' : 'Desactivado'}`,
            //         ephemeral: true
            //     });
            //     break;

            // case 'repeat_playlist':
            //     repeatMode = repeatMode === 'playlist' ? 'none' : 'playlist';
            //     if (repeatMode === 'playlist') originalPlaylist = [...queue]; // Guarda copia de la playlist
            //     await interaction.reply({ content: `Modo repetici√≥n: ${repeatMode === 'playlist' ? 'Playlist activada' : 'Desactivada'}`, ephemeral: true });
            //     break;

            case 'show_queue':
                if (queue.length === 0) {
                    return interaction.reply({ content: 'La cola est√° vac√≠a.', ephemeral: true });
                }
        
                const totalPages = Math.ceil(queue.length / 10);
                const embed = createQueueEmbed(queue, 0);
                const buttons = createPaginationButtons(0, totalPages);
        
                await interaction.reply({
                    embeds: [embed],
                    components: [buttons],
                    ephemeral: true,
                });
                break;
            
            
                case 'prev_page':
                    case 'next_page': {
                        const currentPage = parseInt(interaction.message.embeds[0].footer.text.split(' ')[1]) - 1;
                        let newPage = currentPage;
            
                        if (interaction.customId === 'prev_page') {
                            newPage = Math.max(0, currentPage - 1);
                        } else if (interaction.customId === 'next_page') {
                            newPage = Math.min(Math.ceil(queue.length / 10) - 1, currentPage + 1);
                        }
            
                        const embed = createQueueEmbed(queue, newPage);
                        const buttons = createPaginationButtons(newPage, Math.ceil(queue.length / 10));
            
                        await interaction.update({
                            embeds: [embed],
                            components: [buttons],
                        });
                        break;
                    }
            
                    default:
                        break;
    
        }
    } catch (error) {
        logger.error(`Error en interacci√≥n: ${error.message}`);
    }
});

client.on('messageCreate', async message => {
    if (!message.content.startsWith('!') || message.author.bot) return;

    const args = message.content.slice(1).trim().split(/ +/);
    const command = args.shift().toLowerCase();

    

    if (command === 'play') {
        const query = args.join(' ');
        if (!query) {
            return message.channel.send('Debes proporcionar una URL de YouTube o un nombre de canci√≥n.');
        }

        const voiceChannel = message.member.voice.channel;
        if (!voiceChannel) {
            return message.channel.send('Debes estar en un canal de voz para reproducir m√∫sica.');
        }

        const permissions = voiceChannel.permissionsFor(message.client.user);
        if (!permissions.has(PermissionsBitField.Flags.Connect) || !permissions.has(PermissionsBitField.Flags.Speak)) {
            return message.channel.send('No tengo permisos para unirme y hablar en tu canal de voz.');
        }

        if (query.includes('list=')) {
            // Respuesta inmediata al usuario
            const playlistMessage = await message.channel.send('üìù Obteniendo playlist...');
            
            // Limpiar la URL de la playlist
            const cleanedPlaylistUrl = cleanYouTubeUrl(query);
            logger.info(`üéµ Procesando playlist: ${cleanedPlaylistUrl}`);
            
            // Usar formato simple m√°s confiable
            exec(`yt-dlp --flat-playlist --print "%(id)s|%(title)s" --no-warnings "${cleanedPlaylistUrl}"`, { 
                maxBuffer: 10 * 1024 * 1024, 
                timeout: 60000,
                encoding: 'utf8',
                env: { ...process.env, PYTHONIOENCODING: 'utf-8' }
            }, (error, stdout, stderr) => {
                if (error) {
                    logger.error(`Error ejecutando yt-dlp para playlist: ${error.message}`);
                    return playlistMessage.edit('‚ùå Error al obtener la playlist.');
                }

                try {
                    const lines = stdout.trim().split('\n').filter(line => line.length > 0);
                    let songsAdded = 0;
                    let skippedPrivate = 0;
                    
                    for (const line of lines) {
                        const parts = line.split('|');
                        if (parts.length >= 2) {
                            const videoId = parts[0].trim();
                            let title = parts[1].trim();
                            
                            // Normalizar caracteres UTF-8
                            title = normalizeUTF8(title);
                            
                            // Saltar videos privados o eliminados
                            if (title.includes('[Private video]') || title.includes('[Deleted video]')) {
                                skippedPrivate++;
                                continue;
                            }
                            
                            // Validar ID del video
                            if (videoId && videoId.length >= 10 && videoId.length <= 15) {
                                const videoUrl = `https://www.youtube.com/watch?v=${videoId}`;
                                queue.push({ 
                                    url: videoUrl, 
                                    title: title || 'T√≠tulo no disponible', 
                                    member: message.member, 
                                    channel: message.channel 
                                });
                                songsAdded++;
                            }
                        }
                    }

                    if (songsAdded > 0) {
                        let resultMessage = `‚úÖ Se a√±adieron ${songsAdded} canciones a la cola.`;
                        if (skippedPrivate > 0) {
                            resultMessage += ` (${skippedPrivate} videos privados omitidos)`;
                        }
                        playlistMessage.edit(resultMessage);
                        
                        if (!isProcessing) {
                            playNextInQueue(voiceChannel);
                        }
                    } else {
                        playlistMessage.edit('‚ùå No se encontraron canciones v√°lidas en la playlist.');
                    }
                } catch (parseError) {
                    logger.error(`Error al procesar respuesta de playlist: ${parseError.message}`);
                    playlistMessage.edit('‚ùå Error al procesar la playlist.');
                }
            });
        } else if (query.startsWith('http')) {
            // Respuesta inmediata al usuario
            const initialMessage = await message.channel.send('üîÑ Procesando URL...');
            
            // Limpiar la URL antes de procesarla
            const cleanedUrl = cleanYouTubeUrl(query);
            logger.info(`üîó URL recibida: ${query}`);
            logger.info(`üßπ URL limpia: ${cleanedUrl}`);
            
            if (!isValidYouTubeUrl(cleanedUrl)) {
                logger.warn(`‚ùå URL inv√°lida: ${cleanedUrl}`);
                return initialMessage.edit('‚ùå La URL proporcionada no es v√°lida o no es de YouTube.');
            }

            logger.info(`‚úÖ URL v√°lida, llamando a addSongToQueue...`);
            
            try {
                // Si el query es un enlace de YouTube individual, a√±adirlo usando addSongToQueue
                await addSongToQueue(cleanedUrl, message.member, message.channel, voiceChannel);
                
                // Eliminar el mensaje inicial ya que addSongToQueue env√≠a su propio mensaje de confirmaci√≥n
                initialMessage.delete().catch(() => {});
            } catch (error) {
                logger.error(`Error en addSongToQueue: ${error.message}`);
                initialMessage.edit('‚ùå Error al procesar la canci√≥n.');
            }
        } else {
            // Respuesta inmediata para b√∫squeda
            const searchMessage = await message.channel.send('üîç Buscando en YouTube...');
            
            // Buscar en YouTube el primer resultado usando yt-dlp
            logger.info(`Buscando en YouTube: "${query}"`);
            exec(`yt-dlp "ytsearch1:${query}" --print "%(id)s" --print "%(title)s" --no-warnings`, { 
                timeout: 5000,
                encoding: 'utf8',
                env: { ...process.env, PYTHONIOENCODING: 'utf-8' }
            }, (error, stdout, stderr) => {
                if (error) {
                    logger.error(`Error ejecutando yt-dlp para b√∫squeda: ${error.message}`);
                    return searchMessage.edit('‚ùå Error al buscar en YouTube.');
                }

                logger.info(`Respuesta de yt-dlp: "${stdout.trim()}"`);
                const lines = stdout.trim().split('\n').filter(line => line.length > 0);
                
                if (lines.length < 2) {
                    logger.warn(`Pocas l√≠neas en respuesta: ${lines.length}`);
                    return searchMessage.edit('‚ùå No se encontraron resultados.');
                }

                const videoId = lines[0].trim();
                let title = lines[1].trim();
                
                // Normalizar caracteres UTF-8
                title = normalizeUTF8(title);
                
                logger.info(`Video ID obtenido: "${videoId}", T√≠tulo: "${title}"`);
                
                // Validar que el ID del video tenga el formato correcto
                if (!videoId || videoId.length !== 11) {
                    logger.warn(`ID de video inv√°lido: "${videoId}"`);
                    return searchMessage.edit('‚ùå No se pudo obtener un resultado v√°lido.');
                }
                
                const videoUrl = `https://www.youtube.com/watch?v=${videoId}`;
                
                queue.push({ url: videoUrl, title: title || 'T√≠tulo no disponible', member: message.member, channel: message.channel });

                if (!isProcessing) {
                    searchMessage.edit(`üéµ Reproduciendo: **${title}**`);
                    playNextInQueue(voiceChannel);
                } else {
                    searchMessage.edit(`‚úÖ A√±adido a la cola: **${title}**`);
                }
            });
        }

    } else if (command === 'queue') {
        if (queue.length === 0) {
            message.channel.send('La cola est√° vac√≠a.');
        } else {
            const queueList = queue.map((song, index) => `${index + 1}. ${song.title || song.url}`).join('\n');
            message.channel.send(`üé∂ Cola de reproducci√≥n:\n${queueList}`);
        }
    }
    else if (command === 'playlong') {
        const query = args.join(' ');
        if (!query) {
            return message.channel.send('Debes proporcionar una URL de YouTube para videos largos.');
        }

        const voiceChannel = message.member.voice.channel;
        if (!voiceChannel) {
            return message.channel.send('Debes estar en un canal de voz para reproducir m√∫sica.');
        }

        const permissions = voiceChannel.permissionsFor(message.client.user);
        if (!permissions.has(PermissionsBitField.Flags.Connect) || !permissions.has(PermissionsBitField.Flags.Speak)) {
            return message.channel.send('No tengo permisos para unirme y hablar en tu canal de voz.');
        }

        if (query.startsWith('http')) {
            // Limpiar la URL antes de procesarla
            const cleanedUrl = cleanYouTubeUrl(query);
            
            if (!isValidYouTubeUrl(cleanedUrl)) {
                return message.channel.send('‚ùå La URL proporcionada no es v√°lida o no es de YouTube.');
            }

            // Verificar si ya est√° en la cola para evitar duplicados
            const isDuplicate = queue.some(song => song.url === cleanedUrl) || (currentSong && currentSong.url === cleanedUrl);
            if (isDuplicate) {
                return message.channel.send('‚ùå Esta canci√≥n ya est√° en la cola o reproduci√©ndose.');
            }

            // Agregar directamente sin confirmaci√≥n para el comando playlong
            // Solo enviar mensaje si addSongToQueue no env√≠a el suyo propio
            const playLongMessage = await message.channel.send('üéµ **Comando playlong**: Saltando confirmaci√≥n para video largo...');
            
            try {
                await addSongToQueue(cleanedUrl, message.member, message.channel, voiceChannel, true); // true = skip confirmation
                // Eliminar el mensaje inicial ya que addSongToQueue env√≠a su propio mensaje
                playLongMessage.delete().catch(() => {});
            } catch (error) {
                playLongMessage.edit('‚ùå Error al procesar el video largo.');
            }
        } else {
            message.channel.send('‚ùå Para videos largos usa una URL directa de YouTube.');
        }
    }
    else if (command === 'playhls') {
        const query = args.join(' ');
        if (!query) {
            return message.channel.send('Debes proporcionar una URL de YouTube (comando experimental para videos HLS problem√°ticos).');
        }

        const voiceChannel = message.member.voice.channel;
        if (!voiceChannel) {
            return message.channel.send('Debes estar en un canal de voz para reproducir m√∫sica.');
        }

        const permissions = voiceChannel.permissionsFor(message.client.user);
        if (!permissions.has(PermissionsBitField.Flags.Connect) || !permissions.has(PermissionsBitField.Flags.Speak)) {
            return message.channel.send('No tengo permisos para unirme y hablar en tu canal de voz.');
        }

        if (query.startsWith('http')) {
            const cleanedUrl = cleanYouTubeUrl(query);
            
            if (!isValidYouTubeUrl(cleanedUrl)) {
                return message.channel.send('‚ùå La URL proporcionada no es v√°lida o no es de YouTube.');
            }

            // Verificar duplicados
            const isDuplicate = queue.some(song => song.url === cleanedUrl) || (currentSong && currentSong.url === cleanedUrl);
            if (isDuplicate) {
                return message.channel.send('‚ùå Esta canci√≥n ya est√° en la cola o reproduci√©ndose.');
            }

            message.channel.send('üß™ **Comando experimental playhls**: Intentando descargar video HLS con configuraci√≥n especial...');
            
            // A√±adir flag especial para identificar que es comando HLS
            const videoInfo = await getVideoInfo(cleanedUrl);
            queue.push({ 
                url: cleanedUrl, 
                title: videoInfo.title, 
                originalTitle: videoInfo.originalTitle,
                duration: videoInfo.duration,
                isLong: videoInfo.isLong,
                usesHLS: true,
                forceHLS: true, // Flag especial para este comando
                member: message.member, 
                channel: message.channel 
            });

            if (!isProcessing) {
                playNextInQueue(voiceChannel);
            }
        } else {
            message.channel.send('‚ùå Para el comando playhls usa una URL directa de YouTube.');
        }
    }
    else if (command === 'move') {
        if (queue.length < 2) return message.channel.send('Necesitas al menos 2 canciones en la cola.');
        
        const [oldPos, newPos] = args.map(Number).filter(n => !isNaN(n));
        if (!oldPos || !newPos || oldPos < 1 || newPos < 1 || oldPos > queue.length || newPos > queue.length) {
            return message.channel.send('Posiciones inv√°lidas. Uso: `!move <posici√≥n actual> <nueva posici√≥n>`');
        }
    
        const song = queue.splice(oldPos - 1, 1)[0];
        queue.splice(newPos - 1, 0, song);
        
        message.channel.send(`üéµ Canci√≥n movida de posici√≥n ${oldPos} a ${newPos}`);
    }
    else if (command === 'playnext') {
        const query = args.join(' ');
        if (!query) {
            return message.channel.send('Debes proporcionar una URL de YouTube o un nombre de canci√≥n.');
        }
    
        const voiceChannel = message.member.voice.channel;
        if (!voiceChannel) {
            return message.channel.send('Debes estar en un canal de voz para reproducir m√∫sica.');
        }
    
        const permissions = voiceChannel.permissionsFor(message.client.user);
        if (!permissions.has(PermissionsBitField.Flags.Connect) || !permissions.has(PermissionsBitField.Flags.Speak)) {
            return message.channel.send('No tengo permisos para unirme y hablar en tu canal de voz.');
        }        if (query.includes('list=')) {
            // Limpiar la URL de la playlist
            const cleanedPlaylistUrl = cleanYouTubeUrl(query);
            
            // L√≥gica para playlists
            exec(`yt-dlp -j --flat-playlist --no-warnings "${cleanedPlaylistUrl}"`, { 
                maxBuffer: 10 * 1024 * 1024,
                encoding: 'utf8',
                env: { ...process.env, PYTHONIOENCODING: 'utf-8' }
            }, (error, stdout) => {
                if (error) {
                    logger.error(`Error en yt-dlp: ${error.message}`);
                    return message.channel.send('‚ùå Error al obtener la playlist.');
                }

                try {
                    const playlistData = stdout.trim().split('\n').map(JSON.parse);
                    const songs = [];
                    
                    for (const item of playlistData) {
                        // Validar que el ID sea v√°lido antes de crear la URL (m√°s flexible)
                        if (item.id && item.id.length >= 10 && item.id.length <= 15) {
                            songs.push({
                                url: `https://www.youtube.com/watch?v=${item.id}`,
                                title: item.title || 'T√≠tulo no disponible',
                                member: message.member,
                                channel: message.channel
                            });
                        }
                    }

                    if (songs.length > 0) {
                        // Insertar despu√©s de la canci√≥n actual (posici√≥n 1 si hay una reproducci√≥n activa)
                        const insertPosition = isProcessing ? 1 : 0;
                        queue.splice(insertPosition, 0, ...songs);

                        message.channel.send(`‚è≠ Se a√±adieron ${songs.length} canciones para reproducir a continuaci√≥n.`);

                        if (!isProcessing) {
                            playNextInQueue(voiceChannel);
                        }
                    } else {
                        message.channel.send('‚ùå No se encontraron canciones v√°lidas en la playlist.');
                    }
                } catch (parseError) {
                    logger.error(`Error al procesar la playlist: ${parseError.message}`);
                    message.channel.send('‚ùå Error al procesar la playlist.');
                }
            });
        } else if (query.startsWith('http')) {
            // Limpiar la URL antes de procesarla
            const cleanedUrl = cleanYouTubeUrl(query);
            
            if (!isValidYouTubeUrl(cleanedUrl)) {
                return message.channel.send('‚ùå La URL proporcionada no es v√°lida o no es de YouTube.');
            }

            // L√≥gica para enlaces directos
            const newSong = { url: cleanedUrl, member: message.member, channel: message.channel };
            
            // Insertar despu√©s de la canci√≥n actual (posici√≥n 1 si hay una reproducci√≥n activa)
            const insertPosition = isProcessing ? 1 : 0;
            queue.splice(insertPosition, 0, newSong);
    
            message.channel.send('‚è≠ Canci√≥n a√±adida para reproducir a continuaci√≥n.');
    
            if (!isProcessing) {
                playNextInQueue(voiceChannel);
            }
        } else {            // B√∫squeda de YouTube
            exec(`yt-dlp "ytsearch1:${query}" --print "%(id)s" --print "%(title)s" --no-warnings`, {
                encoding: 'utf8',
                env: { ...process.env, PYTHONIOENCODING: 'utf-8' }
            }, (error, stdout, stderr) => {
                if (error) {
                    logger.error(`Error en la b√∫squeda: ${error.message}`);
                    return message.channel.send('‚ùå Error al buscar la canci√≥n.');
                }

                const lines = stdout.trim().split('\n').filter(line => line.length > 0);
                if (lines.length < 2) {
                    return message.channel.send('‚ùå No se encontraron resultados.');
                }

                const videoId = lines[0].trim();
                let title = lines[1].trim();
                
                // Normalizar caracteres UTF-8
                title = normalizeUTF8(title);
                
                // Validar que el ID del video tenga el formato correcto
                if (!videoId || videoId.length !== 11) {
                    logger.warn(`ID de video inv√°lido: "${videoId}"`);
                    return message.channel.send('‚ùå No se pudo obtener un resultado v√°lido de la b√∫squeda.');
                }

                const videoUrl = `https://www.youtube.com/watch?v=${videoId}`;
                const newSong = { url: videoUrl, title: title || 'T√≠tulo no disponible', member: message.member, channel: message.channel };

                // Insertar despu√©s de la canci√≥n actual (posici√≥n 1 si hay una reproducci√≥n activa)
                const insertPosition = isProcessing ? 1 : 0;
                queue.splice(insertPosition, 0, newSong);

                message.channel.send(`‚è≠ Canci√≥n a√±adida para reproducir a continuaci√≥n: **${title}**`);

                if (!isProcessing) {
                    playNextInQueue(voiceChannel);
                }
            });
        }
    } else if (command === 'formats' || command === 'f') {
        const query = args.join(' ');
        if (!query || !query.startsWith('http')) {
            return message.channel.send('Debes proporcionar una URL de YouTube para ver los formatos disponibles.');
        }

        const cleanedUrl = cleanYouTubeUrl(query);
        if (!isValidYouTubeUrl(cleanedUrl)) {
            return message.channel.send('‚ùå La URL proporcionada no es v√°lida o no es de YouTube.');
        }

        message.channel.send('üîç Obteniendo formatos disponibles...');
        
        exec(`yt-dlp --list-formats --no-warnings "${cleanedUrl}"`, {
            timeout: 10000,
            encoding: 'utf8',
            env: { ...process.env, PYTHONIOENCODING: 'utf-8' }
        }, (error, stdout, stderr) => {
            if (error) {
                return message.channel.send('‚ùå Error al obtener formatos: ' + error.message);
            }
            
            // Procesar la salida para mostrar solo lo m√°s relevante
            const lines = stdout.split('\n');
            const formatLines = lines.filter(line => 
                line.includes('mp4') || 
                line.includes('webm') || 
                line.includes('m4a') ||
                line.includes('audio only') ||
                line.includes('video only')
            ).slice(0, 15); // L√≠mite de 15 l√≠neas para no saturar el chat
            
            if (formatLines.length > 0) {
                const formatText = '```\n' + formatLines.join('\n') + '\n```';
                message.channel.send(`üìã **Formatos disponibles**:\n${formatText}`);
            } else {
                message.channel.send('‚ùå No se pudieron obtener los formatos o el video no est√° disponible.');
            }
        });
    } else if (command === 'playformat' || command === 'pf') {
        const args_copy = [...args];
        const formatId = args_copy.shift(); // Primer argumento es el ID del formato
        const query = args_copy.join(' '); // El resto es la URL
        
        if (!formatId || !query || !query.startsWith('http')) {
            return message.channel.send('Uso: `!playformat <format_id> <URL>`\nEjemplo: `!playformat 140 https://youtube.com/watch?v=...`');
        }

        const voiceChannel = message.member.voice.channel;
        if (!voiceChannel) {
            return message.channel.send('Debes estar en un canal de voz para reproducir m√∫sica.');
        }

        const cleanedUrl = cleanYouTubeUrl(query);
        if (!isValidYouTubeUrl(cleanedUrl)) {
            return message.channel.send('‚ùå La URL proporcionada no es v√°lida o no es de YouTube.');
        }

        // Verificar duplicados
        const isDuplicate = queue.some(song => song.url === cleanedUrl) || (currentSong && currentSong.url === cleanedUrl);
        if (isDuplicate) {
            return message.channel.send('‚ùå Esta canci√≥n ya est√° en la cola o reproduci√©ndose.');
        }

        // Enviar mensaje inicial que ser√° reemplazado por playNextInQueue
        const formatMessage = await message.channel.send(`üéµ **Formato espec√≠fico**: Preparando descarga con formato ${formatId}...`);
        
        const videoInfo = await getVideoInfo(cleanedUrl);
        queue.push({ 
            url: cleanedUrl, 
            title: videoInfo.title, 
            originalTitle: videoInfo.originalTitle,
            duration: videoInfo.duration,
            isLong: videoInfo.isLong,
            customFormat: formatId, // Flag especial para formato espec√≠fico
            member: message.member, 
            channel: message.channel 
        });

        if (!isProcessing) {
            playNextInQueue(voiceChannel);
        }
        
        // Eliminar el mensaje inicial despu√©s de un breve delay
        setTimeout(() => {
            formatMessage.delete().catch(() => {});
        }, 2000);
    } else if (command === 'help' || command === 'h') {
        const helpEmbed = {
            color: 0x0099ff,
            title: 'üéµ Bot de M√∫sica - Comandos Disponibles',
            fields: [
                {
                    name: 'üé∂ Reproducci√≥n B√°sica',
                    value: '`!play <URL/b√∫squeda>` - Reproducir m√∫sica\n`!queue` - Ver cola de reproducci√≥n\n`!playnext <URL/b√∫squeda>` - A√±adir a la siguiente posici√≥n',
                    inline: false
                },
                {
                    name: 'üéÆ Controles',
                    value: 'Usa los **botones** que aparecen cuando reproduces m√∫sica:\n‚Ä¢ ‚è≠ Saltar ‚Ä¢ ‚è∏ Pausar/‚ñ∂Ô∏è Reanudar ‚Ä¢ üîÄ Mezclar\n‚Ä¢ ‚èπ Detener ‚Ä¢ üé∂ Now Playing ‚Ä¢ üéµ Mostrar Cola',
                    inline: false
                },
                {
                    name: 'üõ†Ô∏è Comandos Especiales',
                    value: '`!playlong <URL>` - Videos largos (salta confirmaci√≥n)\n`!playhls <URL>` - Videos HLS problem√°ticos\n`!move <pos1> <pos2>` - Mover canci√≥n en la cola\n`!formats <URL>` - Ver formatos disponibles\n`!playformat <id> <URL>` - Reproducir con formato espec√≠fico',
                    inline: false
                },
                {
                    name: 'üîß Utilidades',
                    value: '`!test` - Verificar que el bot funciona\n`!goodbye` - Probar mensaje de despedida\n`!help` - Mostrar esta ayuda',
                    inline: false
                },
                {
                    name: '‚ú® Caracter√≠sticas',
                    value: '‚Ä¢ Soporte para playlists de YouTube\n‚Ä¢ Detecci√≥n autom√°tica de videos problem√°ticos\n‚Ä¢ Reintento autom√°tico con formatos alternativos\n‚Ä¢ Manejo de caracteres especiales (tildes, √±, etc.)\n‚Ä¢ Timeout inteligente para videos largos\n‚Ä¢ Mensaje de despedida autom√°tico al finalizar',
                    inline: false
                }
            ],
            footer: {
                text: 'Usa los botones de control para una experiencia m√°s fluida'
            }
        };
        
        message.channel.send({ embeds: [helpEmbed] });
        return;
    } else if (command === 'goodbye' || command === 'bye') {
        const voiceChannel = message.member.voice.channel;
        if (!voiceChannel) {
            return message.channel.send('Debes estar en un canal de voz para probar la despedida.');
        }

        await playGoodbyeMessage(voiceChannel, message.channel);
        return;
    } else if (command === 'test' || command === 't') {
        message.channel.send('ü§ñ Bot respondiendo correctamente y r√°pido!');
        return;
    }
});

// NEW: Manejar cierre limpio del bot
process.on('SIGINT', () => {
    logger.info('Apagando bot...');
    processes.forEach(child => child.kill());
    if (connection) connection.destroy();
    client.destroy();
    process.exit();
});

// Funci√≥n para mezclar la cola
function shuffleQueue(queue) {
    for (let i = queue.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [queue[i], queue[j]] = [queue[j], queue[i]];
    }
}

// Funciones auxiliares para la cola
function createQueueEmbed(queue, page = 0) {
    const songsPerPage = 10;
    const start = page * songsPerPage;
    const end = start + songsPerPage;
    const currentQueue = queue.slice(start, end);
    
    // Asegurar que siempre haya un valor v√°lido para description
    const description = currentQueue.length > 0 
        ? currentQueue.map((song, index) => {
            const title = normalizeUTF8(song.title || song.url);
            return `${start + index + 1}. ${title}`;
        }).join('\n') 
        : "No hay canciones en la cola.";

    const embed = {
        title: 'üé∂ Cola de Reproducci√≥n',
        description: description,
        color: 0x00ff00,
        footer: {
            text: `P√°gina ${page + 1} de ${Math.ceil(queue.length / songsPerPage)}`,
        },
    };

    return embed;
}

function createPaginationButtons(page, totalPages) {
    return new ActionRowBuilder().addComponents(
        new ButtonBuilder()
            .setCustomId('prev_page')
            .setLabel('‚¨ÖÔ∏è Anterior')
            .setStyle(ButtonStyle.Secondary)
            .setDisabled(page === 0),
        new ButtonBuilder()
            .setCustomId('next_page')
            .setLabel('Siguiente ‚û°Ô∏è')
            .setStyle(ButtonStyle.Secondary)
            .setDisabled(page >= totalPages - 1)
    );
}

// Funci√≥n mejorada para limpiar archivos temporales
function cleanupTempFile(filePath) {
    try {
        if (fs.existsSync(filePath)) {
            fs.unlinkSync(filePath);
            logger.info(`Archivo temporal eliminado: ${filePath}`);
        }
    } catch (error) {
        logger.error(`Error eliminando archivo temporal ${filePath}: ${error.message}`);
    }
}

// Funci√≥n para limpiar archivos .part y temporales relacionados
function cleanupPartFiles(basePath) {
    try {
        const dir = path.dirname(basePath);
        const baseName = path.basename(basePath, path.extname(basePath));
        
        // Buscar archivos relacionados (.part, .part-Frag*, .ytdl, etc.)
        const files = fs.readdirSync(dir);
        const relatedFiles = files.filter(file => 
            file.includes(baseName) && 
            (file.endsWith('.part') || file.includes('.part-') || file.endsWith('.ytdl') || file.endsWith('.temp'))
        );
        
        relatedFiles.forEach(file => {
            const fullPath = path.join(dir, file);
            try {
                fs.unlinkSync(fullPath);
                logger.info(`Archivo relacionado eliminado: ${file}`);
            } catch (error) {
                logger.warn(`No se pudo eliminar ${file}: ${error.message}`);
            }
        });
        
        if (relatedFiles.length > 0) {
            logger.info(`Limpiados ${relatedFiles.length} archivos temporales relacionados`);
        }
    } catch (error) {
        logger.error(`Error limpiando archivos relacionados: ${error.message}`);
    }
}

// Funci√≥n para limpiar y validar URLs de YouTube
function cleanYouTubeUrl(url) {
    try {
        // Decodificar la URL
        let cleanUrl = decodeURIComponent(url);
        
        // Remover caracteres problem√°ticos adicionales
        cleanUrl = cleanUrl.replace(/[\[\]]/g, '');
        
        // Para URLs de YouTube
        if (cleanUrl.includes('youtube.com/watch') || cleanUrl.includes('youtube.com/playlist')) {
            const urlObj = new URL(cleanUrl);
            const videoId = urlObj.searchParams.get('v');
            const listId = urlObj.searchParams.get('list');
            
            // Si es una playlist, mantener ambos par√°metros
            if (listId) {
                if (videoId && /^[a-zA-Z0-9_-]{11}$/.test(videoId)) {
                    return `https://www.youtube.com/watch?v=${videoId}&list=${listId}`;
                } else {
                    return `https://www.youtube.com/playlist?list=${listId}`;
                }
            }
            
            // Si es solo un video, limpiar normalmente
            if (videoId && /^[a-zA-Z0-9_-]{11}$/.test(videoId)) {
                return `https://www.youtube.com/watch?v=${videoId}`;
            }
        }
        
        // Para URLs de youtu.be
        if (cleanUrl.includes('youtu.be/')) {
            const match = cleanUrl.match(/youtu\.be\/([a-zA-Z0-9_-]{11})/);
            if (match) {
                return `https://www.youtube.com/watch?v=${match[1]}`;
            }
        }
        
        // Validar que sea una URL v√°lida de YouTube usando regex como fallback
        const youtubeRegex = /^https?:\/\/(www\.)?(youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]+)/;
        
        if (youtubeRegex.test(cleanUrl)) {
            // Extraer el ID del video y reconstruir la URL limpia
            const match = cleanUrl.match(/[?&]v=([a-zA-Z0-9_-]{11})/);
            if (match) {
                return `https://www.youtube.com/watch?v=${match[1]}`;
            }
        }
        
        // Si no se puede limpiar, devolver la URL original
        return url;
    } catch (error) {
        logger.error(`Error limpiando URL: ${error.message}`);
        return url;
    }
}

// Funci√≥n para validar si una URL es de YouTube
function isValidYouTubeUrl(url) {
    const youtubeRegex = /^https?:\/\/(www\.)?(youtube\.com\/(watch\?v=|playlist\?list=)|youtu\.be\/)([a-zA-Z0-9_-]+)/;
    return youtubeRegex.test(url);
}

// Funci√≥n para normalizar caracteres UTF-8 mal codificados
// Funci√≥n para normalizar caracteres UTF-8 mal codificados
function normalizeUTF8(text) {
    if (!text) return text;
    
    // Mapear caracteres especiales comunes mal codificados
    const charMap = {
        '√É¬°': '√°', '√É¬©': '√©', '√É¬≠': '√≠', '√É¬≥': '√≥', '√É¬∫': '√∫',
        '√É¬§': '√§', '√É¬´': '√´', '√É¬Ø': '√Ø', '√É¬∂': '√∂', '√É¬º': '√º',
        '√É¬±': '√±', '√É‚Ä°': '√á', '√É¬ß': '√ß',
        '√É': '√Ä', '√É‚Ç¨': '√Ä', '√É‚Ä∞': '√â', '√É"': '√ì', '√É≈°': '√ö',
        '√É¬ø': '√ø', '√É¬Ω': '√Ω', '√É¬¶': '√¶', '√É¬∏': '√∏', '√É¬•': '√•',
        '√É¬¢': '√¢', '√É‚Ñ¢': '√ô', '√É¬π': '√π', '√É¬®': '√®', '√É ': '√†',
        '√É¬¥': '√¥', '√É¬Æ': '√Æ'
    };
    
    let normalized = text;
    for (const [malformed, correct] of Object.entries(charMap)) {
        normalized = normalized.replace(new RegExp(malformed, 'g'), correct);
    }
    
    return normalized;
}

// Funci√≥n para detectar videos problem√°ticos con formato HLS
function detectProblematicVideo(stderrData) {
    const hlsIndicators = [
        'hls',
        'HLS',
        'm3u8',
        'manifest',
        'fragment',
        'segmentation',
        'live stream',
        'stream',
        'playlist.m3u8'
    ];
    
    const errorIndicators = [
        'Unable to download webpage',
        'HTTP Error 403',
        'format not available',
        'requested format not available',
        'fragment',
        'connection broken',
        'timeout',
        'unable to extract',
        'extraction failed',
        'manifest'
    ];
    
    const isHLS = hlsIndicators.some(indicator => 
        stderrData.toLowerCase().includes(indicator.toLowerCase())
    );
    
    const hasError = errorIndicators.some(indicator => 
        stderrData.toLowerCase().includes(indicator.toLowerCase())
    );
    
    return { isHLS, hasError };
}

// Funci√≥n para manejar videos problem√°ticos
function handleProblematicVideo(song, stderrData, tempPath) {
    const { isHLS, hasError } = detectProblematicVideo(stderrData);
    
    let errorMessage = '‚ùå Error al descargar el audio.';
    let shouldRetry = false;
    
    if (stderrData.includes('Requested format is not available')) {
        errorMessage = 'üîÑ **Formato no disponible**\n' +
                      '‚ö†Ô∏è Intentando con formato alternativo...';
        shouldRetry = true;
    } else if (isHLS && hasError) {
        errorMessage = 'üö´ **Video HLS Problem√°tico Detectado**\n' +
                      '‚ùå Este video usa formato HLS que no se puede descargar correctamente.\n' +
                      '‚è≠Ô∏è Saltando autom√°ticamente a la siguiente canci√≥n...';
        shouldRetry = false;
    } else if (isHLS) {
        errorMessage = '‚ö†Ô∏è **Video HLS Detectado**\n' +
                      'üîÑ Formato de streaming detectado. Reintentando con configuraci√≥n especial...';
        shouldRetry = true;
    } else if (stderrData.includes('HTTP Error 403')) {
        errorMessage = '‚ùå **Error 403**: Acceso denegado al video.\n' +
                      'üîÑ Intentando con configuraci√≥n alternativa...';
        shouldRetry = true;
    } else if (stderrData.includes('Video unavailable')) {
        errorMessage = '‚ùå **Video no disponible**\n' +
                      '‚è≠Ô∏è Puede estar privado, eliminado o restringido. Saltando...';
        shouldRetry = false;
    } else if (stderrData.includes('Sign in to confirm your age')) {
        errorMessage = '‚ùå **Verificaci√≥n de edad requerida**\n' +
                      '‚è≠Ô∏è Este video requiere verificaci√≥n de edad. Saltando...';
        shouldRetry = false;
    } else if (stderrData.includes('Private video')) {
        errorMessage = '‚ùå **Video privado**\n' +
                      '‚è≠Ô∏è No se puede acceder a este video. Saltando...';
        shouldRetry = false;
    } else if (stderrData.includes('This video is not available')) {
        errorMessage = '‚ùå **Video no disponible en tu regi√≥n**\n' +
                      '‚è≠Ô∏è Restricci√≥n geogr√°fica detectada. Saltando...';
        shouldRetry = false;
    } else if (stderrData.includes('Unable to download webpage')) {
        errorMessage = 'üîÑ **Error de conexi√≥n**\n' +
                      '‚ö†Ô∏è Reintentando con configuraci√≥n alternativa...';
        shouldRetry = true;
    } else if (stderrData.includes('extraction failed')) {
        errorMessage = 'üîÑ **Error de extracci√≥n**\n' +
                      '‚ö†Ô∏è Reintentando con formato alternativo...';
        shouldRetry = true;
    } else if (stderrData.includes('network unreachable') || stderrData.includes('Connection refused')) {
        errorMessage = '‚ùå **Error de red**\n' +
                      '‚è≠Ô∏è Problemas de conexi√≥n. Saltando...';
        shouldRetry = false;
    } else if (stderrData.includes('too many requests') || stderrData.includes('429')) {
        errorMessage = '‚ùå **Demasiadas solicitudes**\n' +
                      '‚è≠Ô∏è L√≠mite de rate alcanzado. Saltando...';
        shouldRetry = false;
    }
    
    return { errorMessage, shouldRetry };
}

// Funci√≥n para reproducir mensaje de despedida antes de desconectar
async function playGoodbyeMessage(voiceChannel, textChannel) {
    try {
        logger.info('üîä Reproduciendo mensaje de despedida...');
        
        // Crear una conexi√≥n temporal para la despedida
        const goodbyeConnection = joinVoiceChannel({
            channelId: voiceChannel.id,
            guildId: voiceChannel.guild.id,
            adapterCreator: voiceChannel.guild.voiceAdapterCreator,
        });

        // Esperar a que la conexi√≥n est√© lista
        await new Promise((resolve, reject) => {
            const timeout = setTimeout(() => {
                reject(new Error('Timeout en conexi√≥n de despedida'));
            }, 5000);

            goodbyeConnection.on('stateChange', (oldState, newState) => {
                if (newState.status === 'ready') {
                    clearTimeout(timeout);
                    resolve();
                }
            });
        });

        // Crear el audio resource con un mensaje de despedida
        // En lugar de usar TTS real, podemos usar un archivo de audio simple
        // o hacer que el bot "hable" con mensajes de texto
        
        // Opci√≥n 1: Mensaje de texto de despedida
        if (textChannel) {
            const goodbyeEmbed = {
                color: 0xFF6B6B,
                title: 'üëã ¬°Hasta luego!',
                description: 'üéµ **Gracias por usar el bot de m√∫sica**\n' +
                           '‚ú® ¬°Espero haber alegrado tu d√≠a con buena m√∫sica!\n' +
                           'üîÑ Puedes volver a llamarme cuando quieras con `!play`\n' +
                           'üíñ ¬°Que tengas un excelente d√≠a!',
                footer: { text: 'Bot desconect√°ndose...' },
                timestamp: new Date()
            };
            
            await textChannel.send({ embeds: [goodbyeEmbed] });
        }

        // Opci√≥n 2: Si queremos usar un archivo de audio de despedida
        // Podr√≠amos agregar aqu√≠ la l√≥gica para reproducir un archivo MP3 de despedida
        // Por ahora usaremos un delay simulado
        await new Promise(resolve => setTimeout(resolve, 2000));

        // Desconectar suavemente
        goodbyeConnection.destroy();
        logger.info('‚úÖ Mensaje de despedida completado');
        
    } catch (error) {
        logger.error(`Error en mensaje de despedida: ${error.message}`);
        // Si hay error en la despedida, continuar con la desconexi√≥n normal
    }
}
